#!/usr/bin/env ruby

################################################################
# rbenv support:
# If this file is a symlink, and bound to a specific ruby
# version via rbenv (indicated by RBENV_VERSION),
# I want to resolve the symlink and re-exec
# the original executable respecting the .ruby_version
# which should indicate the right version.
#
if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

require "rubygems"
require "clian"
require "sheetq"
require "logger"

Encoding.default_external="UTF-8"

class SheetqCLI < Clian::Cli
  package_name 'SHEETQ'
  remove_command :configuration

  Signal.trap(:INT){
    Thor.new.say "Interrupted quit.", :red
    exit(0)
  }

  ################################################################
  # global option

  class_option :profile,    :desc => "Set profiler flag", :type => :boolean

  ################################################################
  # register frequently used options

  named_option :format,     :desc => "Set printing format", :enum => %w(short full metadata minimal raw mewl)
  named_option :dry_run,    :desc => "Perform a trial run with no changes made", :type => :boolean
  named_option :query,      :desc => "Filter messages by QUERY"

  ################################################################
  # Command: auth
  ################################################################
  desc "auth", "Authenticate interactively"

  def auth
    puts "Authenticating #{client.user}..."
    begin
      client.auth_interactively
    rescue Sheetq::GoogleClient::AuthorizationError
      Thor.new.say "ERROR: authorization failed.", :red
      exit(1)
    end
  end

  ################################################################
  # Command: init
  ################################################################
  desc "init", "Create new config file"

  expand_option :config

  def init
    Sheetq::Command::Init.new(@config_path)
  end

  ################################################################
  # Command: nomnichi
  ################################################################
  desc "nomnichi [SHEET_ID]", "Show recently published nomnichi articles"

  expand_option :config
  option :whosnext, :type => :boolean, :desc => "Show the next candidate for writing nomnichi article"

  def nomnichi(member_sheet_id = config.general.default_sheet_id)
    Sheetq::Command::Nomnichi.new(member_sheet_id, options[:whosnext])
  end

  ################################################################
  # Command: attendance
  ################################################################
  desc "attendance INOUT", "Logger to 'attendance' sheet"

  expand_option :config
  option :sheet, :desc => "Set Google spreadsheet ID"
  option :comment, :desc => "Set comment column"

  def attendance(inout)
    sheet_id = options[:sheet] || config.general.default_sheet_id
    comment = options[:comment] || ""
    resource_class = Array # resource_class must implement to_a method

    spreadsheet = Sheetq::Service::Spreadsheet.new(client, sheet_id)
    sheet = Sheetq::Service::Sheet.new(spreadsheet, "attendance", Array)
    begin
      sheet.append_row([Time.now.strftime("%Y-%m-%d %H:%M:%S"), inout, ENV["USER"], comment])
    rescue => e
      puts "Error: #{e.message}"
    end
  end

  ################################################################
  # Command: whois
  ################################################################
  desc "whois KEYWORD", "Search members' profile by KEYWORD"

  expand_option :config
  option :sheet, :desc => "Set Google spreadsheet ID"

  def whois(keyword)
    member_sheet_id = options[:sheet] || config.general.default_sheet_id

    spreadsheet = Sheetq::Service::Spreadsheet.new(client, member_sheet_id)
    sheet = Sheetq::Service::Sheet.new(spreadsheet, "members", Sheetq::Resource::Member)
    members = sheet.fetch

    members.each do |member|
      if member.match(keyword)
        puts "-------------------------------------"
        puts member.to_s
      end
    end
  end


  ################################################################
  # Command: show
  ################################################################
  desc "show SHEET_ID SHEET_NAME", "Show sheet"

  expand_option :config

  def show(sheet_id, sheet_name)
    range = "#{sheet_name}"
    response = client.get_spreadsheet_values(sheet_id, range)

    max_length = response.values.map{|row| row.length}.max
    last_index = [0, max_length - 1].max

    response.values.each do |row|
      if row.length < max_length
        row[last_index] = nil
      end
      puts row.join(",")
    end
  end


  ################################################################
  # private

  private

  def error_and_exit(message)
    STDERR.puts message
    exit 1
  end

  def parse_label_names(label_names)
    (label_names&.split(/ *, */) || []).map do |name|
      unless label = client.label_by_name(name)
        error_and_exit("No label named #{name}")
      end
      label
    end
  end

  attr_reader :builder, :config, :user, :context, :client

  def setup_global_options(command, *args)
    exit_on_error do
      if options[:profile]
        require 'profiler'
        Profiler__.start_profile
      end

      if options[:debug]
        require "pp"
        $SHEETQ_DEBUG = true
        $SHEETQ_DEBUG_FOR_DEVELOPER = true if ENV["SHEETQ_DEBUG_FOR_DEVELOPER"]
      end

      unless @logger
        @logger = ::Logger.new($stderr)
        @logger.formatter = proc {|severity, datetime, progname, msg| "#{datetime} #{msg}\n"}
        Sheetq::Command.logger = @logger
      end

      @config_path = options[:config] || DEFAULT_CONFIG_PATH

      return true if ["init", "help"].member?(command.name)

      @config ||= Sheetq::Config.create_from_file(@config_path)
      @user  = options[:user] || config.general.default_user
      @client ||= Sheetq::GoogleClient.new(config.general.client_id,
                                         config.general.client_secret,
                                         File.expand_path("token_store.yml", File.dirname(@config_path)),
                                         @user, @logger)

      Sheetq::Command.client ||= @client

      unless ["auth"].member?(command.name)
        begin
          @client.auth unless @client_already_authorized
          @client_already_authorized = true
        rescue Sheetq::GmailClient::AuthorizationError
          Thor.new.say "ERROR: access token expired? try: sheetq auth --user=#{@user}", :red
          exit(1)
        end
      end
    end
  end

  def custom_completion_for_banner(banner)
    case banner
    when /^USER/
      "(#{config.general.default_user})"
    else
      nil
    end
  end
end

SheetqCLI.start(ARGV)
